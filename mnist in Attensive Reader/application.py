# coding=utf-8import osos.chdir("../")import tensorflow as tfimport modelimport matplotlib.pyplot as pltimport numpy as npfrom tensorflow.examples.tutorials.mnist import input_datamnist = input_data.read_data_sets("MNIST_data", one_hot=True)def predict(model, pred_num, sess):    saver = tf.train.Saver()    correct = 0    row = int((pred_num - 1) / 5) + 1    fig, ax = plt.subplots(5, 3 * row)    for i in range(pred_num):        batch_x, batch_y = mnist.train.next_batch(model.batch_size)        batch_x = batch_x.reshape((model.batch_size, model.steps, model.inputs))        saver.restore(sess, "./mnist in Attensive Reader/model/model.ckpt")        pred, attention = sess.run([tf.argmax(model.output, 1), model.s], feed_dict={model.q: batch_x, model.a:batch_x, model.keep_prob_q: 1.0, model.keep_prob_a: 1.0})        label = sess.run(tf.argmax(batch_y, 1))        print "Sample %d------\nprediction %s\nreal label %s" % (i + 1, pred, label)        draw(i, ax, batch_x, attention)        if pred == label:            correct += 1    print "predict accuracy %g" % (correct * 1.0/ pred_num)    plt.show()def draw(num, ax, image, attention):    origin = np.array(image[0].reshape([28, 28]) * 255, dtype="uint8")    ax[num % 5, int(num / 5) * 3].imshow(origin, cmap='gray')    max = np.max(attention)    attention /= max    att = range(0, 28)    for i in range(28):        origin[i] = origin[i] * attention[0][i][0]        att[27 - i] = attention[0][i][0]    ax[num % 5, int(num / 5) * 3 + 1].imshow(origin, cmap='gray')    ax[num % 5, int(num / 5) * 3 + 2].barh(range(0, 28), att)if __name__ == "__main__":    my_network = model.Attensive_Reader(name="mnist", batch_size=1)    pred_num = 15    init = tf.global_variables_initializer()    with tf.Session() as sess:        predict(my_network, pred_num, sess)